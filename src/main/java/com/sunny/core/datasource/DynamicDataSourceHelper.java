package com.sunny.core.datasource;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.beans.BeansException;import org.springframework.beans.factory.support.BeanDefinitionBuilder;import org.springframework.beans.factory.support.DefaultListableBeanFactory;import org.springframework.context.ApplicationContext;import org.springframework.context.ConfigurableApplicationContext;import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;import java.lang.reflect.Field;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;/** * 动态数据源spring实例化辅助类 * * @author cdxpc <cdxpc2018@163.com>, <br/> * 		   kevin.chen <crsfyc-9@163.com> * @date 2019年3月25日 * @since 1.0.0v */public class DynamicDataSourceHelper {	private static List<String> excludeFields = Arrays.asList("springBeanName", "abc");	/**	 * 动态创建数据源bean	 * 	 * @param clazz datasource class	 * @param obj datasource bean	 * @param context spring context	 * @param beanName spring bean name	 * @param isInit 是否是初始化操作	 * @param <T> 泛型	 */	public static <T> Object createDynamicDataSource(Class<T> clazz, Object obj, ApplicationContext context,			String beanName, boolean isInit) throws IllegalArgumentException, IllegalAccessException {		Object bean = null;		try {			if (!isInit) {				bean = context.getBean(beanName);			}		} catch (BeansException e) {			// ignore the exception		}		if (bean == null) {			// ApplicationContext转为ConfigurableApplicationContext,便于获取beanFactory			ConfigurableApplicationContext config = (ConfigurableApplicationContext) context;			// 获取beanFactory对象			DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) config.getBeanFactory();			// 通过BeanDefinitionBuilder来构建一个通用的bean的定义			BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(DruidDataSource.class);			// 获取需要构建的bean所需要初始化的属性，给属性赋值			Map<String, Object> propertyValues = getPropertyValues(clazz, obj);			// 将这些属性加入到构建者对象中去			for (Entry<String, Object> entry : propertyValues.entrySet()) {				builder.addPropertyValue(entry.getKey(), entry.getValue());			}			// 使用beanFactory进行bean的注册，注册到spring容器中去			beanFactory.registerBeanDefinition(beanName, builder.getBeanDefinition());		}		// 返回刚刚实例化的bean对象		return context.getBean(beanName);	}	/**	 * 反射获取某个类的属性，及属性的值	 * 	 * @param clazz 类	 * @param obj 对象	 * @param <T> 泛型	 */	private static <T> Map<String, Object> getPropertyValues(Class<T> clazz, Object obj)			throws IllegalArgumentException, IllegalAccessException {		Map<String, Object> propertyValues = new HashMap<>();		Field[] fields = clazz.getDeclaredFields();		for (Field field : fields) {			if ("serialVersionUID".equals(field.getName()) || excludeFields.contains(field.getName())) {				continue;			}			field.setAccessible(true);			propertyValues.put(field.getName(), field.get(obj));		}		return propertyValues;	}	/**	 * 通过反射来获取属性targetDataSources的值	 * 	 * @param obj 对象	 */	@SuppressWarnings("unchecked")	public static Map<Object, Object> getTargetDataSources(Object obj)			throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {		Field field = AbstractRoutingDataSource.class.getDeclaredField("targetDataSources");		if (field != null) {			field.setAccessible(true);			return (Map<Object, Object>) field.get(obj);		}		return null;	}}